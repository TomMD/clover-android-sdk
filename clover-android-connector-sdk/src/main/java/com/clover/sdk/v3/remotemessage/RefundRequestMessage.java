/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.remotemessage;

import com.clover.sdk.GenericClient;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getFullRefund fullRefund}</li>
 * <li>{@link #getAmount amount}</li>
 * <li>{@link #getOrderId orderId}</li>
 * <li>{@link #getPaymentId paymentId}</li>
 * <li>{@link #getDisableCloverPrinting disableCloverPrinting}</li>
 * <li>{@link #getDisableReceiptSelection disableReceiptSelection}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class RefundRequestMessage extends com.clover.sdk.v3.remotemessage.Message {

  /**
   * If true, then it is a full refund.  The amount will be ignored.
   */
  public java.lang.Boolean getFullRefund() {
    return genClient.cacheGet(CacheKey.fullRefund);
  }

  /**
   * Amount of refund.  Used in partial refunds.
   */
  public java.lang.Long getAmount() {
    return genClient.cacheGet(CacheKey.amount);
  }

  /**
   * Unique identifier for a order
   */
  public java.lang.String getOrderId() {
    return genClient.cacheGet(CacheKey.orderId);
  }

  /**
   * Unique identifier for a payment
   */
  public java.lang.String getPaymentId() {
    return genClient.cacheGet(CacheKey.paymentId);
  }

  public java.lang.Boolean getDisableCloverPrinting() {
    return genClient.cacheGet(CacheKey.disableCloverPrinting);
  }

  public java.lang.Boolean getDisableReceiptSelection() {
    return genClient.cacheGet(CacheKey.disableReceiptSelection);
  }

  /**
   * The list of message types
   */
  @Override
  public com.clover.sdk.v3.remotemessage.Method getMethod() {
    return genClient.cacheGet(CacheKey.method);
  }

  /**
   * The version of this message
   */
  @Override
  public java.lang.Integer getVersion() {
    return genClient.cacheGet(CacheKey.version);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<RefundRequestMessage> {
    fullRefund {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("fullRefund", java.lang.Boolean.class);
      }
    },
    amount {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("amount", java.lang.Long.class);
      }
    },
    orderId {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("orderId", java.lang.String.class);
      }
    },
    paymentId {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("paymentId", java.lang.String.class);
      }
    },
    disableCloverPrinting {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("disableCloverPrinting", java.lang.Boolean.class);
      }
    },
    disableReceiptSelection {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("disableReceiptSelection", java.lang.Boolean.class);
      }
    },
    method {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractEnum("method", com.clover.sdk.v3.remotemessage.Method.class);
      }
    },
    version {
      @Override
      public Object extractValue(RefundRequestMessage instance) {
        return instance.genClient.extractOther("version", java.lang.Integer.class);
      }
    },
      ;
  }

  private GenericClient<RefundRequestMessage> genClient;

  /**
  * Constructs a new empty instance.
  */
  public RefundRequestMessage() {
    super(false);
    genClient = new GenericClient<RefundRequestMessage>(this);
    this.setMethod(com.clover.sdk.v3.remotemessage.Method.REFUND_REQUEST);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected RefundRequestMessage(boolean noInit) {
    super(false);
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public RefundRequestMessage(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public RefundRequestMessage(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public RefundRequestMessage(RefundRequestMessage src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {

    genClient.validateLength(getOrderId(), 13);

    genClient.validateLength(getPaymentId(), 13);
  }

  /** Checks whether the 'fullRefund' field is set and is not null */
  public boolean isNotNullFullRefund() {
    return genClient.cacheValueIsNotNull(CacheKey.fullRefund);
  }

  /** Checks whether the 'amount' field is set and is not null */
  public boolean isNotNullAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.amount);
  }

  /** Checks whether the 'orderId' field is set and is not null */
  public boolean isNotNullOrderId() {
    return genClient.cacheValueIsNotNull(CacheKey.orderId);
  }

  /** Checks whether the 'paymentId' field is set and is not null */
  public boolean isNotNullPaymentId() {
    return genClient.cacheValueIsNotNull(CacheKey.paymentId);
  }

  /** Checks whether the 'disableCloverPrinting' field is set and is not null */
  public boolean isNotNullDisableCloverPrinting() {
    return genClient.cacheValueIsNotNull(CacheKey.disableCloverPrinting);
  }

  /** Checks whether the 'disableReceiptSelection' field is set and is not null */
  public boolean isNotNullDisableReceiptSelection() {
    return genClient.cacheValueIsNotNull(CacheKey.disableReceiptSelection);
  }

  /** Checks whether the 'method' field is set and is not null */
  @Override
  public boolean isNotNullMethod() {
    return genClient.cacheValueIsNotNull(CacheKey.method);
  }

  /** Checks whether the 'version' field is set and is not null */
  @Override
  public boolean isNotNullVersion() {
    return genClient.cacheValueIsNotNull(CacheKey.version);
  }



  /** Checks whether the 'fullRefund' field has been set, however the value could be null */
  public boolean hasFullRefund() {
    return genClient.cacheHasKey(CacheKey.fullRefund);
  }

  /** Checks whether the 'amount' field has been set, however the value could be null */
  public boolean hasAmount() {
    return genClient.cacheHasKey(CacheKey.amount);
  }

  /** Checks whether the 'orderId' field has been set, however the value could be null */
  public boolean hasOrderId() {
    return genClient.cacheHasKey(CacheKey.orderId);
  }

  /** Checks whether the 'paymentId' field has been set, however the value could be null */
  public boolean hasPaymentId() {
    return genClient.cacheHasKey(CacheKey.paymentId);
  }

  /** Checks whether the 'disableCloverPrinting' field has been set, however the value could be null */
  public boolean hasDisableCloverPrinting() {
    return genClient.cacheHasKey(CacheKey.disableCloverPrinting);
  }

  /** Checks whether the 'disableReceiptSelection' field has been set, however the value could be null */
  public boolean hasDisableReceiptSelection() {
    return genClient.cacheHasKey(CacheKey.disableReceiptSelection);
  }

  /** Checks whether the 'method' field has been set, however the value could be null */
  @Override
  public boolean hasMethod() {
    return genClient.cacheHasKey(CacheKey.method);
  }

  /** Checks whether the 'version' field has been set, however the value could be null */
  @Override
  public boolean hasVersion() {
    return genClient.cacheHasKey(CacheKey.version);
  }


  /**
   * Sets the field 'fullRefund'.
   */
  public RefundRequestMessage setFullRefund(java.lang.Boolean fullRefund) {
    return genClient.setOther(fullRefund, CacheKey.fullRefund);
  }

  /**
   * Sets the field 'amount'.
   */
  public RefundRequestMessage setAmount(java.lang.Long amount) {
    return genClient.setOther(amount, CacheKey.amount);
  }

  /**
   * Sets the field 'orderId'.
   */
  public RefundRequestMessage setOrderId(java.lang.String orderId) {
    return genClient.setOther(orderId, CacheKey.orderId);
  }

  /**
   * Sets the field 'paymentId'.
   */
  public RefundRequestMessage setPaymentId(java.lang.String paymentId) {
    return genClient.setOther(paymentId, CacheKey.paymentId);
  }

  /**
   * Sets the field 'disableCloverPrinting'.
   */
  public RefundRequestMessage setDisableCloverPrinting(java.lang.Boolean disableCloverPrinting) {
    return genClient.setOther(disableCloverPrinting, CacheKey.disableCloverPrinting);
  }

  /**
   * Sets the field 'disableReceiptSelection'.
   */
  public RefundRequestMessage setDisableReceiptSelection(java.lang.Boolean disableReceiptSelection) {
    return genClient.setOther(disableReceiptSelection, CacheKey.disableReceiptSelection);
  }

  /**
   * Sets the field 'method'.
   */
  @Override
  public Message setMethod(com.clover.sdk.v3.remotemessage.Method method) {
    return genClient.setOther(method, CacheKey.method);
  }

  /**
   * Sets the field 'version'.
   */
  @Override
  public Message setVersion(java.lang.Integer version) {
    return genClient.setOther(version, CacheKey.version);
  }


  /** Clears the 'fullRefund' field, the 'has' method for this field will now return false */
  public void clearFullRefund() {
    genClient.clear(CacheKey.fullRefund);
  }
  /** Clears the 'amount' field, the 'has' method for this field will now return false */
  public void clearAmount() {
    genClient.clear(CacheKey.amount);
  }
  /** Clears the 'orderId' field, the 'has' method for this field will now return false */
  public void clearOrderId() {
    genClient.clear(CacheKey.orderId);
  }
  /** Clears the 'paymentId' field, the 'has' method for this field will now return false */
  public void clearPaymentId() {
    genClient.clear(CacheKey.paymentId);
  }
  /** Clears the 'disableCloverPrinting' field, the 'has' method for this field will now return false */
  public void clearDisableCloverPrinting() {
    genClient.clear(CacheKey.disableCloverPrinting);
  }
  /** Clears the 'disableReceiptSelection' field, the 'has' method for this field will now return false */
  public void clearDisableReceiptSelection() {
    genClient.clear(CacheKey.disableReceiptSelection);
  }
  /** Clears the 'method' field, the 'has' method for this field will now return false */
  @Override
  public void clearMethod() {
    genClient.clear(CacheKey.method);
  }
  /** Clears the 'version' field, the 'has' method for this field will now return false */
  @Override
  public void clearVersion() {
    genClient.clear(CacheKey.version);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public RefundRequestMessage copyChanges() {
    RefundRequestMessage copy = new RefundRequestMessage();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(RefundRequestMessage src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new RefundRequestMessage(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<RefundRequestMessage> CREATOR = new android.os.Parcelable.Creator<RefundRequestMessage>() {
    @Override
    public RefundRequestMessage createFromParcel(android.os.Parcel in) {
      RefundRequestMessage instance = new RefundRequestMessage(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public RefundRequestMessage[] newArray(int size) {
      return new RefundRequestMessage[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<RefundRequestMessage> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<RefundRequestMessage>() {
    @Override
    public RefundRequestMessage create(org.json.JSONObject jsonObject) {
      return new RefundRequestMessage(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean FULLREFUND_IS_REQUIRED = false;
    public static final boolean AMOUNT_IS_REQUIRED = false;
    public static final boolean ORDERID_IS_REQUIRED = false;
    public static final long ORDERID_MAX_LEN = 13;
    public static final boolean PAYMENTID_IS_REQUIRED = false;
    public static final long PAYMENTID_MAX_LEN = 13;
    public static final boolean DISABLECLOVERPRINTING_IS_REQUIRED = false;
    public static final boolean DISABLERECEIPTSELECTION_IS_REQUIRED = false;
    public static final boolean METHOD_IS_REQUIRED = false;
    public static final boolean VERSION_IS_REQUIRED = false;

  }

}
