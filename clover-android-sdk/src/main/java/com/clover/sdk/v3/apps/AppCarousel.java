/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.apps;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getId id}</li>
 * <li>{@link #getDisplayName displayName}</li>
 * <li>{@link #getName name}</li>
 * <li>{@link #getCountryCode countryCode}</li>
 * <li>{@link #getReseller reseller}</li>
 * <li>{@link #getMerchantGroup merchantGroup}</li>
 * <li>{@link #getMaxSize maxSize}</li>
 * <li>{@link #getSortOrder sortOrder}</li>
 * <li>{@link #getViewAllButton viewAllButton}</li>
 * <li>{@link #getResultLabel resultLabel}</li>
 * <li>{@link #getAutoInstall autoInstall}</li>
 * <li>{@link #getCarouselApps carouselApps}</li>
 * <li>{@link #getSortBy sortBy}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class AppCarousel extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  public java.lang.String getDisplayName() {
    return genClient.cacheGet(CacheKey.displayName);
  }

  public java.lang.String getName() {
    return genClient.cacheGet(CacheKey.name);
  }

  public java.lang.String getCountryCode() {
    return genClient.cacheGet(CacheKey.countryCode);
  }

  public com.clover.sdk.v3.base.Reference getReseller() {
    return genClient.cacheGet(CacheKey.reseller);
  }

  public com.clover.sdk.v3.base.Reference getMerchantGroup() {
    return genClient.cacheGet(CacheKey.merchantGroup);
  }

  public java.lang.Integer getMaxSize() {
    return genClient.cacheGet(CacheKey.maxSize);
  }

  public java.lang.Integer getSortOrder() {
    return genClient.cacheGet(CacheKey.sortOrder);
  }

  public java.lang.String getViewAllButton() {
    return genClient.cacheGet(CacheKey.viewAllButton);
  }

  public java.lang.String getResultLabel() {
    return genClient.cacheGet(CacheKey.resultLabel);
  }

  /**
   * When true, apps in this carousel will be installed to merchants in the associated merchant group.
   */
  public java.lang.Boolean getAutoInstall() {
    return genClient.cacheGet(CacheKey.autoInstall);
  }

  public java.util.List<com.clover.sdk.v3.base.Reference> getCarouselApps() {
    return genClient.cacheGet(CacheKey.carouselApps);
  }

  public com.clover.sdk.v3.apps.CarouselSortBy getSortBy() {
    return genClient.cacheGet(CacheKey.sortBy);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<AppCarousel> {
    id {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("id", java.lang.String.class);
      }
    },
    displayName {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("displayName", java.lang.String.class);
      }
    },
    name {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("name", java.lang.String.class);
      }
    },
    countryCode {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("countryCode", java.lang.String.class);
      }
    },
    reseller {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractRecord("reseller", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    merchantGroup {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractRecord("merchantGroup", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    maxSize {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("maxSize", java.lang.Integer.class);
      }
    },
    sortOrder {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("sortOrder", java.lang.Integer.class);
      }
    },
    viewAllButton {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("viewAllButton", java.lang.String.class);
      }
    },
    resultLabel {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("resultLabel", java.lang.String.class);
      }
    },
    autoInstall {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractOther("autoInstall", java.lang.Boolean.class);
      }
    },
    carouselApps {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractListRecord("carouselApps", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    sortBy {
      @Override
      public Object extractValue(AppCarousel instance) {
        return instance.genClient.extractEnum("sortBy", com.clover.sdk.v3.apps.CarouselSortBy.class);
      }
    },
      ;
  }

  private GenericClient<AppCarousel> genClient;

  /**
  * Constructs a new empty instance.
  */
  public AppCarousel() {
    genClient = new GenericClient<AppCarousel>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected AppCarousel(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public AppCarousel(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public AppCarousel(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public AppCarousel(AppCarousel src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateLength(getId(), 13);

    genClient.validateLength(getDisplayName(), 127);

    genClient.validateLength(getName(), 127);

    genClient.validateLength(getCountryCode(), 2);

    genClient.validateLength(getViewAllButton(), 127);

    genClient.validateLength(getResultLabel(), 127);
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'displayName' field is set and is not null */
  public boolean isNotNullDisplayName() {
    return genClient.cacheValueIsNotNull(CacheKey.displayName);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return genClient.cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'countryCode' field is set and is not null */
  public boolean isNotNullCountryCode() {
    return genClient.cacheValueIsNotNull(CacheKey.countryCode);
  }

  /** Checks whether the 'reseller' field is set and is not null */
  public boolean isNotNullReseller() {
    return genClient.cacheValueIsNotNull(CacheKey.reseller);
  }

  /** Checks whether the 'merchantGroup' field is set and is not null */
  public boolean isNotNullMerchantGroup() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantGroup);
  }

  /** Checks whether the 'maxSize' field is set and is not null */
  public boolean isNotNullMaxSize() {
    return genClient.cacheValueIsNotNull(CacheKey.maxSize);
  }

  /** Checks whether the 'sortOrder' field is set and is not null */
  public boolean isNotNullSortOrder() {
    return genClient.cacheValueIsNotNull(CacheKey.sortOrder);
  }

  /** Checks whether the 'viewAllButton' field is set and is not null */
  public boolean isNotNullViewAllButton() {
    return genClient.cacheValueIsNotNull(CacheKey.viewAllButton);
  }

  /** Checks whether the 'resultLabel' field is set and is not null */
  public boolean isNotNullResultLabel() {
    return genClient.cacheValueIsNotNull(CacheKey.resultLabel);
  }

  /** Checks whether the 'autoInstall' field is set and is not null */
  public boolean isNotNullAutoInstall() {
    return genClient.cacheValueIsNotNull(CacheKey.autoInstall);
  }

  /** Checks whether the 'carouselApps' field is set and is not null */
  public boolean isNotNullCarouselApps() {
    return genClient.cacheValueIsNotNull(CacheKey.carouselApps);
  }

  /** Checks whether the 'carouselApps' field is set and is not null and is not empty */
  public boolean isNotEmptyCarouselApps() { return isNotNullCarouselApps() && !getCarouselApps().isEmpty(); }

  /** Checks whether the 'sortBy' field is set and is not null */
  public boolean isNotNullSortBy() {
    return genClient.cacheValueIsNotNull(CacheKey.sortBy);
  }



  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'displayName' field has been set, however the value could be null */
  public boolean hasDisplayName() {
    return genClient.cacheHasKey(CacheKey.displayName);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return genClient.cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'countryCode' field has been set, however the value could be null */
  public boolean hasCountryCode() {
    return genClient.cacheHasKey(CacheKey.countryCode);
  }

  /** Checks whether the 'reseller' field has been set, however the value could be null */
  public boolean hasReseller() {
    return genClient.cacheHasKey(CacheKey.reseller);
  }

  /** Checks whether the 'merchantGroup' field has been set, however the value could be null */
  public boolean hasMerchantGroup() {
    return genClient.cacheHasKey(CacheKey.merchantGroup);
  }

  /** Checks whether the 'maxSize' field has been set, however the value could be null */
  public boolean hasMaxSize() {
    return genClient.cacheHasKey(CacheKey.maxSize);
  }

  /** Checks whether the 'sortOrder' field has been set, however the value could be null */
  public boolean hasSortOrder() {
    return genClient.cacheHasKey(CacheKey.sortOrder);
  }

  /** Checks whether the 'viewAllButton' field has been set, however the value could be null */
  public boolean hasViewAllButton() {
    return genClient.cacheHasKey(CacheKey.viewAllButton);
  }

  /** Checks whether the 'resultLabel' field has been set, however the value could be null */
  public boolean hasResultLabel() {
    return genClient.cacheHasKey(CacheKey.resultLabel);
  }

  /** Checks whether the 'autoInstall' field has been set, however the value could be null */
  public boolean hasAutoInstall() {
    return genClient.cacheHasKey(CacheKey.autoInstall);
  }

  /** Checks whether the 'carouselApps' field has been set, however the value could be null */
  public boolean hasCarouselApps() {
    return genClient.cacheHasKey(CacheKey.carouselApps);
  }

  /** Checks whether the 'sortBy' field has been set, however the value could be null */
  public boolean hasSortBy() {
    return genClient.cacheHasKey(CacheKey.sortBy);
  }


  /**
   * Sets the field 'id'.
   */
  public AppCarousel setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'displayName'.
   */
  public AppCarousel setDisplayName(java.lang.String displayName) {
    return genClient.setOther(displayName, CacheKey.displayName);
  }

  /**
   * Sets the field 'name'.
   */
  public AppCarousel setName(java.lang.String name) {
    return genClient.setOther(name, CacheKey.name);
  }

  /**
   * Sets the field 'countryCode'.
   */
  public AppCarousel setCountryCode(java.lang.String countryCode) {
    return genClient.setOther(countryCode, CacheKey.countryCode);
  }

  /**
   * Sets the field 'reseller'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public AppCarousel setReseller(com.clover.sdk.v3.base.Reference reseller) {
    return genClient.setRecord(reseller, CacheKey.reseller);
  }

  /**
   * Sets the field 'merchantGroup'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public AppCarousel setMerchantGroup(com.clover.sdk.v3.base.Reference merchantGroup) {
    return genClient.setRecord(merchantGroup, CacheKey.merchantGroup);
  }

  /**
   * Sets the field 'maxSize'.
   */
  public AppCarousel setMaxSize(java.lang.Integer maxSize) {
    return genClient.setOther(maxSize, CacheKey.maxSize);
  }

  /**
   * Sets the field 'sortOrder'.
   */
  public AppCarousel setSortOrder(java.lang.Integer sortOrder) {
    return genClient.setOther(sortOrder, CacheKey.sortOrder);
  }

  /**
   * Sets the field 'viewAllButton'.
   */
  public AppCarousel setViewAllButton(java.lang.String viewAllButton) {
    return genClient.setOther(viewAllButton, CacheKey.viewAllButton);
  }

  /**
   * Sets the field 'resultLabel'.
   */
  public AppCarousel setResultLabel(java.lang.String resultLabel) {
    return genClient.setOther(resultLabel, CacheKey.resultLabel);
  }

  /**
   * Sets the field 'autoInstall'.
   */
  public AppCarousel setAutoInstall(java.lang.Boolean autoInstall) {
    return genClient.setOther(autoInstall, CacheKey.autoInstall);
  }

  /**
   * Sets the field 'carouselApps'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public AppCarousel setCarouselApps(java.util.List<com.clover.sdk.v3.base.Reference> carouselApps) {
    return genClient.setArrayRecord(carouselApps, CacheKey.carouselApps);
  }

  /**
   * Sets the field 'sortBy'.
   */
  public AppCarousel setSortBy(com.clover.sdk.v3.apps.CarouselSortBy sortBy) {
    return genClient.setOther(sortBy, CacheKey.sortBy);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'displayName' field, the 'has' method for this field will now return false */
  public void clearDisplayName() {
    genClient.clear(CacheKey.displayName);
  }
  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    genClient.clear(CacheKey.name);
  }
  /** Clears the 'countryCode' field, the 'has' method for this field will now return false */
  public void clearCountryCode() {
    genClient.clear(CacheKey.countryCode);
  }
  /** Clears the 'reseller' field, the 'has' method for this field will now return false */
  public void clearReseller() {
    genClient.clear(CacheKey.reseller);
  }
  /** Clears the 'merchantGroup' field, the 'has' method for this field will now return false */
  public void clearMerchantGroup() {
    genClient.clear(CacheKey.merchantGroup);
  }
  /** Clears the 'maxSize' field, the 'has' method for this field will now return false */
  public void clearMaxSize() {
    genClient.clear(CacheKey.maxSize);
  }
  /** Clears the 'sortOrder' field, the 'has' method for this field will now return false */
  public void clearSortOrder() {
    genClient.clear(CacheKey.sortOrder);
  }
  /** Clears the 'viewAllButton' field, the 'has' method for this field will now return false */
  public void clearViewAllButton() {
    genClient.clear(CacheKey.viewAllButton);
  }
  /** Clears the 'resultLabel' field, the 'has' method for this field will now return false */
  public void clearResultLabel() {
    genClient.clear(CacheKey.resultLabel);
  }
  /** Clears the 'autoInstall' field, the 'has' method for this field will now return false */
  public void clearAutoInstall() {
    genClient.clear(CacheKey.autoInstall);
  }
  /** Clears the 'carouselApps' field, the 'has' method for this field will now return false */
  public void clearCarouselApps() {
    genClient.clear(CacheKey.carouselApps);
  }
  /** Clears the 'sortBy' field, the 'has' method for this field will now return false */
  public void clearSortBy() {
    genClient.clear(CacheKey.sortBy);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public AppCarousel copyChanges() {
    AppCarousel copy = new AppCarousel();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(AppCarousel src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new AppCarousel(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<AppCarousel> CREATOR = new android.os.Parcelable.Creator<AppCarousel>() {
    @Override
    public AppCarousel createFromParcel(android.os.Parcel in) {
      AppCarousel instance = new AppCarousel(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public AppCarousel[] newArray(int size) {
      return new AppCarousel[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<AppCarousel> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<AppCarousel>() {
    @Override
    public AppCarousel create(org.json.JSONObject jsonObject) {
      return new AppCarousel(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;
    public static final boolean DISPLAYNAME_IS_REQUIRED = false;
    public static final long DISPLAYNAME_MAX_LEN = 127;
    public static final boolean NAME_IS_REQUIRED = false;
    public static final long NAME_MAX_LEN = 127;
    public static final boolean COUNTRYCODE_IS_REQUIRED = false;
    public static final long COUNTRYCODE_MAX_LEN = 2;
    public static final boolean RESELLER_IS_REQUIRED = false;
    public static final boolean MERCHANTGROUP_IS_REQUIRED = false;
    public static final boolean MAXSIZE_IS_REQUIRED = false;
    public static final boolean SORTORDER_IS_REQUIRED = false;
    public static final boolean VIEWALLBUTTON_IS_REQUIRED = false;
    public static final long VIEWALLBUTTON_MAX_LEN = 127;
    public static final boolean RESULTLABEL_IS_REQUIRED = false;
    public static final long RESULTLABEL_MAX_LEN = 127;
    public static final boolean AUTOINSTALL_IS_REQUIRED = false;
    public static final boolean CAROUSELAPPS_IS_REQUIRED = false;
    public static final boolean SORTBY_IS_REQUIRED = false;

  }

}
