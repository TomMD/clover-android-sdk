/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.merchant;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getId id}</li>
 * <li>{@link #getName name}</li>
 * <li>{@link #getDescription description}</li>
 * <li>{@link #getPrice price}</li>
 * <li>{@link #getModules modules}</li>
 * <li>{@link #getAppBundle appBundle}</li>
 * <li>{@link #getDefaultPlan defaultPlan}</li>
 * <li>{@link #getBillToMid billToMid}</li>
 * <li>{@link #getPlanCode planCode}</li>
 * <li>{@link #getActivationTime activationTime}</li>
 * <li>{@link #getDeactivationTime deactivationTime}</li>
 * <li>{@link #getReseller reseller}</li>
 * <li>{@link #getMerchantPlanGroup merchantPlanGroup}</li>
 * <li>{@link #getCreatedTime createdTime}</li>
 * <li>{@link #getModifiedTime modifiedTime}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class MerchantPlan extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  /**
   * Unique identifier
   */
  public java.lang.String getId() {
    return genClient.cacheGet(CacheKey.id);
  }

  /**
   * The name of the merchant plan
   */
  public java.lang.String getName() {
    return genClient.cacheGet(CacheKey.name);
  }

  /**
   * Description of the plan
   */
  public java.lang.String getDescription() {
    return genClient.cacheGet(CacheKey.description);
  }

  public java.lang.Long getPrice() {
    return genClient.cacheGet(CacheKey.price);
  }

  public java.util.List<com.clover.sdk.v3.merchant.Module> getModules() {
    return genClient.cacheGet(CacheKey.modules);
  }

  public com.clover.sdk.v3.apps.AppBundle getAppBundle() {
    return genClient.cacheGet(CacheKey.appBundle);
  }

  /**
   * If true and multiple plans of this code then treat as default plan for reseller. Cannot use word default.
   */
  public java.lang.Boolean getDefaultPlan() {
    return genClient.cacheGet(CacheKey.defaultPlan);
  }

  /**
   * If true then billing will charge monthly fee regardless of device status or count.
   */
  public java.lang.Boolean getBillToMid() {
    return genClient.cacheGet(CacheKey.billToMid);
  }

  /**
   * First data plan code
   */
  public java.lang.String getPlanCode() {
    return genClient.cacheGet(CacheKey.planCode);
  }

  /**
   * Date/time when this plan becomes active. If null then active now.
   */
  public java.lang.Long getActivationTime() {
    return genClient.cacheGet(CacheKey.activationTime);
  }

  /**
   * Date/time when this plan becomes inactive. If null then no end of life.
   */
  public java.lang.Long getDeactivationTime() {
    return genClient.cacheGet(CacheKey.deactivationTime);
  }

  public com.clover.sdk.v3.resellers.Reseller getReseller() {
    return genClient.cacheGet(CacheKey.reseller);
  }

  public com.clover.sdk.v3.base.Reference getMerchantPlanGroup() {
    return genClient.cacheGet(CacheKey.merchantPlanGroup);
  }

  /**
   * Date/time this plan was created.
   */
  public java.lang.Long getCreatedTime() {
    return genClient.cacheGet(CacheKey.createdTime);
  }

  /**
   * Date/time this plan was last modified.
   */
  public java.lang.Long getModifiedTime() {
    return genClient.cacheGet(CacheKey.modifiedTime);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<MerchantPlan> {
    id {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("id", java.lang.String.class);
      }
    },
    name {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("name", java.lang.String.class);
      }
    },
    description {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("description", java.lang.String.class);
      }
    },
    price {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("price", java.lang.Long.class);
      }
    },
    modules {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractListRecord("modules", com.clover.sdk.v3.merchant.Module.JSON_CREATOR);
      }
    },
    appBundle {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractRecord("appBundle", com.clover.sdk.v3.apps.AppBundle.JSON_CREATOR);
      }
    },
    defaultPlan {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("defaultPlan", java.lang.Boolean.class);
      }
    },
    billToMid {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("billToMid", java.lang.Boolean.class);
      }
    },
    planCode {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("planCode", java.lang.String.class);
      }
    },
    activationTime {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("activationTime", java.lang.Long.class);
      }
    },
    deactivationTime {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("deactivationTime", java.lang.Long.class);
      }
    },
    reseller {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractRecord("reseller", com.clover.sdk.v3.resellers.Reseller.JSON_CREATOR);
      }
    },
    merchantPlanGroup {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractRecord("merchantPlanGroup", com.clover.sdk.v3.base.Reference.JSON_CREATOR);
      }
    },
    createdTime {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("createdTime", java.lang.Long.class);
      }
    },
    modifiedTime {
      @Override
      public Object extractValue(MerchantPlan instance) {
        return instance.genClient.extractOther("modifiedTime", java.lang.Long.class);
      }
    },
      ;
  }

  private GenericClient<MerchantPlan> genClient;

  /**
  * Constructs a new empty instance.
  */
  public MerchantPlan() {
    genClient = new GenericClient<MerchantPlan>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected MerchantPlan(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public MerchantPlan(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public MerchantPlan(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public MerchantPlan(MerchantPlan src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
    genClient.validateLength(getId(), 13);

    genClient.validateLength(getName(), 31);

    genClient.validateLength(getDescription(), 2047);

    genClient.validateLength(getPlanCode(), 50);
  }

  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return genClient.cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return genClient.cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'description' field is set and is not null */
  public boolean isNotNullDescription() {
    return genClient.cacheValueIsNotNull(CacheKey.description);
  }

  /** Checks whether the 'price' field is set and is not null */
  public boolean isNotNullPrice() {
    return genClient.cacheValueIsNotNull(CacheKey.price);
  }

  /** Checks whether the 'modules' field is set and is not null */
  public boolean isNotNullModules() {
    return genClient.cacheValueIsNotNull(CacheKey.modules);
  }

  /** Checks whether the 'modules' field is set and is not null and is not empty */
  public boolean isNotEmptyModules() { return isNotNullModules() && !getModules().isEmpty(); }

  /** Checks whether the 'appBundle' field is set and is not null */
  public boolean isNotNullAppBundle() {
    return genClient.cacheValueIsNotNull(CacheKey.appBundle);
  }

  /** Checks whether the 'defaultPlan' field is set and is not null */
  public boolean isNotNullDefaultPlan() {
    return genClient.cacheValueIsNotNull(CacheKey.defaultPlan);
  }

  /** Checks whether the 'billToMid' field is set and is not null */
  public boolean isNotNullBillToMid() {
    return genClient.cacheValueIsNotNull(CacheKey.billToMid);
  }

  /** Checks whether the 'planCode' field is set and is not null */
  public boolean isNotNullPlanCode() {
    return genClient.cacheValueIsNotNull(CacheKey.planCode);
  }

  /** Checks whether the 'activationTime' field is set and is not null */
  public boolean isNotNullActivationTime() {
    return genClient.cacheValueIsNotNull(CacheKey.activationTime);
  }

  /** Checks whether the 'deactivationTime' field is set and is not null */
  public boolean isNotNullDeactivationTime() {
    return genClient.cacheValueIsNotNull(CacheKey.deactivationTime);
  }

  /** Checks whether the 'reseller' field is set and is not null */
  public boolean isNotNullReseller() {
    return genClient.cacheValueIsNotNull(CacheKey.reseller);
  }

  /** Checks whether the 'merchantPlanGroup' field is set and is not null */
  public boolean isNotNullMerchantPlanGroup() {
    return genClient.cacheValueIsNotNull(CacheKey.merchantPlanGroup);
  }

  /** Checks whether the 'createdTime' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.createdTime);
  }

  /** Checks whether the 'modifiedTime' field is set and is not null */
  public boolean isNotNullModifiedTime() {
    return genClient.cacheValueIsNotNull(CacheKey.modifiedTime);
  }



  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return genClient.cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return genClient.cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'description' field has been set, however the value could be null */
  public boolean hasDescription() {
    return genClient.cacheHasKey(CacheKey.description);
  }

  /** Checks whether the 'price' field has been set, however the value could be null */
  public boolean hasPrice() {
    return genClient.cacheHasKey(CacheKey.price);
  }

  /** Checks whether the 'modules' field has been set, however the value could be null */
  public boolean hasModules() {
    return genClient.cacheHasKey(CacheKey.modules);
  }

  /** Checks whether the 'appBundle' field has been set, however the value could be null */
  public boolean hasAppBundle() {
    return genClient.cacheHasKey(CacheKey.appBundle);
  }

  /** Checks whether the 'defaultPlan' field has been set, however the value could be null */
  public boolean hasDefaultPlan() {
    return genClient.cacheHasKey(CacheKey.defaultPlan);
  }

  /** Checks whether the 'billToMid' field has been set, however the value could be null */
  public boolean hasBillToMid() {
    return genClient.cacheHasKey(CacheKey.billToMid);
  }

  /** Checks whether the 'planCode' field has been set, however the value could be null */
  public boolean hasPlanCode() {
    return genClient.cacheHasKey(CacheKey.planCode);
  }

  /** Checks whether the 'activationTime' field has been set, however the value could be null */
  public boolean hasActivationTime() {
    return genClient.cacheHasKey(CacheKey.activationTime);
  }

  /** Checks whether the 'deactivationTime' field has been set, however the value could be null */
  public boolean hasDeactivationTime() {
    return genClient.cacheHasKey(CacheKey.deactivationTime);
  }

  /** Checks whether the 'reseller' field has been set, however the value could be null */
  public boolean hasReseller() {
    return genClient.cacheHasKey(CacheKey.reseller);
  }

  /** Checks whether the 'merchantPlanGroup' field has been set, however the value could be null */
  public boolean hasMerchantPlanGroup() {
    return genClient.cacheHasKey(CacheKey.merchantPlanGroup);
  }

  /** Checks whether the 'createdTime' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return genClient.cacheHasKey(CacheKey.createdTime);
  }

  /** Checks whether the 'modifiedTime' field has been set, however the value could be null */
  public boolean hasModifiedTime() {
    return genClient.cacheHasKey(CacheKey.modifiedTime);
  }


  /**
   * Sets the field 'id'.
   */
  public MerchantPlan setId(java.lang.String id) {
    return genClient.setOther(id, CacheKey.id);
  }

  /**
   * Sets the field 'name'.
   */
  public MerchantPlan setName(java.lang.String name) {
    return genClient.setOther(name, CacheKey.name);
  }

  /**
   * Sets the field 'description'.
   */
  public MerchantPlan setDescription(java.lang.String description) {
    return genClient.setOther(description, CacheKey.description);
  }

  /**
   * Sets the field 'price'.
   */
  public MerchantPlan setPrice(java.lang.Long price) {
    return genClient.setOther(price, CacheKey.price);
  }

  /**
   * Sets the field 'modules'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public MerchantPlan setModules(java.util.List<com.clover.sdk.v3.merchant.Module> modules) {
    return genClient.setArrayRecord(modules, CacheKey.modules);
  }

  /**
   * Sets the field 'appBundle'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public MerchantPlan setAppBundle(com.clover.sdk.v3.apps.AppBundle appBundle) {
    return genClient.setRecord(appBundle, CacheKey.appBundle);
  }

  /**
   * Sets the field 'defaultPlan'.
   */
  public MerchantPlan setDefaultPlan(java.lang.Boolean defaultPlan) {
    return genClient.setOther(defaultPlan, CacheKey.defaultPlan);
  }

  /**
   * Sets the field 'billToMid'.
   */
  public MerchantPlan setBillToMid(java.lang.Boolean billToMid) {
    return genClient.setOther(billToMid, CacheKey.billToMid);
  }

  /**
   * Sets the field 'planCode'.
   */
  public MerchantPlan setPlanCode(java.lang.String planCode) {
    return genClient.setOther(planCode, CacheKey.planCode);
  }

  /**
   * Sets the field 'activationTime'.
   */
  public MerchantPlan setActivationTime(java.lang.Long activationTime) {
    return genClient.setOther(activationTime, CacheKey.activationTime);
  }

  /**
   * Sets the field 'deactivationTime'.
   */
  public MerchantPlan setDeactivationTime(java.lang.Long deactivationTime) {
    return genClient.setOther(deactivationTime, CacheKey.deactivationTime);
  }

  /**
   * Sets the field 'reseller'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public MerchantPlan setReseller(com.clover.sdk.v3.resellers.Reseller reseller) {
    return genClient.setRecord(reseller, CacheKey.reseller);
  }

  /**
   * Sets the field 'merchantPlanGroup'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public MerchantPlan setMerchantPlanGroup(com.clover.sdk.v3.base.Reference merchantPlanGroup) {
    return genClient.setRecord(merchantPlanGroup, CacheKey.merchantPlanGroup);
  }

  /**
   * Sets the field 'createdTime'.
   */
  public MerchantPlan setCreatedTime(java.lang.Long createdTime) {
    return genClient.setOther(createdTime, CacheKey.createdTime);
  }

  /**
   * Sets the field 'modifiedTime'.
   */
  public MerchantPlan setModifiedTime(java.lang.Long modifiedTime) {
    return genClient.setOther(modifiedTime, CacheKey.modifiedTime);
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    genClient.clear(CacheKey.id);
  }
  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    genClient.clear(CacheKey.name);
  }
  /** Clears the 'description' field, the 'has' method for this field will now return false */
  public void clearDescription() {
    genClient.clear(CacheKey.description);
  }
  /** Clears the 'price' field, the 'has' method for this field will now return false */
  public void clearPrice() {
    genClient.clear(CacheKey.price);
  }
  /** Clears the 'modules' field, the 'has' method for this field will now return false */
  public void clearModules() {
    genClient.clear(CacheKey.modules);
  }
  /** Clears the 'appBundle' field, the 'has' method for this field will now return false */
  public void clearAppBundle() {
    genClient.clear(CacheKey.appBundle);
  }
  /** Clears the 'defaultPlan' field, the 'has' method for this field will now return false */
  public void clearDefaultPlan() {
    genClient.clear(CacheKey.defaultPlan);
  }
  /** Clears the 'billToMid' field, the 'has' method for this field will now return false */
  public void clearBillToMid() {
    genClient.clear(CacheKey.billToMid);
  }
  /** Clears the 'planCode' field, the 'has' method for this field will now return false */
  public void clearPlanCode() {
    genClient.clear(CacheKey.planCode);
  }
  /** Clears the 'activationTime' field, the 'has' method for this field will now return false */
  public void clearActivationTime() {
    genClient.clear(CacheKey.activationTime);
  }
  /** Clears the 'deactivationTime' field, the 'has' method for this field will now return false */
  public void clearDeactivationTime() {
    genClient.clear(CacheKey.deactivationTime);
  }
  /** Clears the 'reseller' field, the 'has' method for this field will now return false */
  public void clearReseller() {
    genClient.clear(CacheKey.reseller);
  }
  /** Clears the 'merchantPlanGroup' field, the 'has' method for this field will now return false */
  public void clearMerchantPlanGroup() {
    genClient.clear(CacheKey.merchantPlanGroup);
  }
  /** Clears the 'createdTime' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    genClient.clear(CacheKey.createdTime);
  }
  /** Clears the 'modifiedTime' field, the 'has' method for this field will now return false */
  public void clearModifiedTime() {
    genClient.clear(CacheKey.modifiedTime);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public MerchantPlan copyChanges() {
    MerchantPlan copy = new MerchantPlan();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(MerchantPlan src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new MerchantPlan(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<MerchantPlan> CREATOR = new android.os.Parcelable.Creator<MerchantPlan>() {
    @Override
    public MerchantPlan createFromParcel(android.os.Parcel in) {
      MerchantPlan instance = new MerchantPlan(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public MerchantPlan[] newArray(int size) {
      return new MerchantPlan[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<MerchantPlan> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<MerchantPlan>() {
    @Override
    public MerchantPlan create(org.json.JSONObject jsonObject) {
      return new MerchantPlan(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;
    public static final boolean NAME_IS_REQUIRED = false;
    public static final long NAME_MAX_LEN = 31;
    public static final boolean DESCRIPTION_IS_REQUIRED = false;
    public static final long DESCRIPTION_MAX_LEN = 2047;
    public static final boolean PRICE_IS_REQUIRED = false;
    public static final boolean MODULES_IS_REQUIRED = false;
    public static final boolean APPBUNDLE_IS_REQUIRED = false;
    public static final boolean DEFAULTPLAN_IS_REQUIRED = false;
    public static final boolean BILLTOMID_IS_REQUIRED = false;
    public static final boolean PLANCODE_IS_REQUIRED = false;
    public static final long PLANCODE_MAX_LEN = 50;
    public static final boolean ACTIVATIONTIME_IS_REQUIRED = false;
    public static final boolean DEACTIVATIONTIME_IS_REQUIRED = false;
    public static final boolean RESELLER_IS_REQUIRED = false;
    public static final boolean MERCHANTPLANGROUP_IS_REQUIRED = false;
    public static final boolean CREATEDTIME_IS_REQUIRED = false;
    public static final boolean MODIFIEDTIME_IS_REQUIRED = false;

  }

}
