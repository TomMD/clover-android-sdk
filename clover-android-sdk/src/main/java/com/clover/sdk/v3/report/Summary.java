/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2016 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.report;

import com.clover.sdk.GenericClient;
import com.clover.sdk.GenericParcelable;

/**
 * This is an auto-generated Clover data object.
 * <p>
 * <h3>Fields</h3>
 * <ul>
 * <li>{@link #getNum num}</li>
 * <li>{@link #getAmount amount}</li>
 * <li>{@link #getTipAmount tipAmount}</li>
 * <li>{@link #getTaxAmount taxAmount}</li>
 * <li>{@link #getServiceChargeAmount serviceChargeAmount}</li>
 * <li>{@link #getStartTimestamp startTimestamp}</li>
 * <li>{@link #getEndTimestamp endTimestamp}</li>
 * <li>{@link #getAmountWithoutTips amountWithoutTips}</li>
 * <li>{@link #getAmountWithoutDiscounts amountWithoutDiscounts}</li>
 * <li>{@link #getDiscountsWithTaxAndServiceCharge discountsWithTaxAndServiceCharge}</li>
 * <li>{@link #getNet net}</li>
 * <li>{@link #getNetOnline netOnline}</li>
 * <li>{@link #getNetOffline netOffline}</li>
 * <li>{@link #getRevenueAmount revenueAmount}</li>
 * <li>{@link #getRevenueAmountWithoutServiceCharge revenueAmountWithoutServiceCharge}</li>
 * </ul>
 */
@SuppressWarnings("all")
public class Summary extends GenericParcelable implements com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public java.lang.Long getNum() {
    return genClient.cacheGet(CacheKey.num);
  }

  /**
   * The amount paid or refunded. This includes tax, discounts and service charge. This is not supposed to include tip, though there are times when refunds mistakenly include tips. A new field amountWithoutTips has been added for those incorrect endpoints.
   */
  public java.lang.Long getAmount() {
    return genClient.cacheGet(CacheKey.amount);
  }

  public java.lang.Long getTipAmount() {
    return genClient.cacheGet(CacheKey.tipAmount);
  }

  public java.lang.Long getTaxAmount() {
    return genClient.cacheGet(CacheKey.taxAmount);
  }

  public java.lang.Long getServiceChargeAmount() {
    return genClient.cacheGet(CacheKey.serviceChargeAmount);
  }

  /**
   * Beginning of the time period for this summary
   */
  public java.lang.Long getStartTimestamp() {
    return genClient.cacheGet(CacheKey.startTimestamp);
  }

  /**
   * End of the time period for this summary
   */
  public java.lang.Long getEndTimestamp() {
    return genClient.cacheGet(CacheKey.endTimestamp);
  }

  /**
   * The amount paid or refunded. This includes tax, discounts and service charge. This does not include tip.
   */
  public java.lang.Long getAmountWithoutTips() {
    return genClient.cacheGet(CacheKey.amountWithoutTips);
  }

  /**
   * The amount that would have been paid, including tips, taxes and service charge, before discounts were applied. Applies only to Gross Sales Before Discounts.
   */
  public java.lang.Long getAmountWithoutDiscounts() {
    return genClient.cacheGet(CacheKey.amountWithoutDiscounts);
  }

  /**
   * The sum of discounts plus the tax and service charge that would have occurred if the discounts hadn't been applied. Applies only to Gross Sales.
   */
  public java.lang.Long getDiscountsWithTaxAndServiceCharge() {
    return genClient.cacheGet(CacheKey.discountsWithTaxAndServiceCharge);
  }

  /**
   * The amount paid or refunded. This includes tax, discounts, tip and service charge.
   */
  public java.lang.Long getNet() {
    return genClient.cacheGet(CacheKey.net);
  }

  /**
   * The amount paid via cash or via online gateway payments. This includes tax, discounts, tip and service charge. Applies only to payments and is only used in some countries.
   */
  public java.lang.Long getNetOnline() {
    return genClient.cacheGet(CacheKey.netOnline);
  }

  /**
   * The amount paid via offline gateway payments. This includes tax, discounts, tip and service charge. Applies only to payments and is only used in some countries.
   */
  public java.lang.Long getNetOffline() {
    return genClient.cacheGet(CacheKey.netOffline);
  }

  /**
   * The amount paid or refunded without tip, tax and non-revenue item sales. This includes discounts and service charge.
   */
  public java.lang.Long getRevenueAmount() {
    return genClient.cacheGet(CacheKey.revenueAmount);
  }

  /**
   * The amount paid or refunded without tip, tax, service charge and non-revenue item sales. This includes discounts.
   */
  public java.lang.Long getRevenueAmountWithoutServiceCharge() {
    return genClient.cacheGet(CacheKey.revenueAmountWithoutServiceCharge);
  }




  private enum CacheKey implements com.clover.sdk.ValueExtractorEnum<Summary> {
    num {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("num", java.lang.Long.class);
      }
    },
    amount {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("amount", java.lang.Long.class);
      }
    },
    tipAmount {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("tipAmount", java.lang.Long.class);
      }
    },
    taxAmount {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("taxAmount", java.lang.Long.class);
      }
    },
    serviceChargeAmount {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("serviceChargeAmount", java.lang.Long.class);
      }
    },
    startTimestamp {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("startTimestamp", java.lang.Long.class);
      }
    },
    endTimestamp {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("endTimestamp", java.lang.Long.class);
      }
    },
    amountWithoutTips {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("amountWithoutTips", java.lang.Long.class);
      }
    },
    amountWithoutDiscounts {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("amountWithoutDiscounts", java.lang.Long.class);
      }
    },
    discountsWithTaxAndServiceCharge {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("discountsWithTaxAndServiceCharge", java.lang.Long.class);
      }
    },
    net {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("net", java.lang.Long.class);
      }
    },
    netOnline {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("netOnline", java.lang.Long.class);
      }
    },
    netOffline {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("netOffline", java.lang.Long.class);
      }
    },
    revenueAmount {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("revenueAmount", java.lang.Long.class);
      }
    },
    revenueAmountWithoutServiceCharge {
      @Override
      public Object extractValue(Summary instance) {
        return instance.genClient.extractOther("revenueAmountWithoutServiceCharge", java.lang.Long.class);
      }
    },
      ;
  }

  private GenericClient<Summary> genClient;

  /**
  * Constructs a new empty instance.
  */
  public Summary() {
    genClient = new GenericClient<Summary>(this);
  }

  @Override
  protected GenericClient getGenericClient() {
    return genClient;
  }

  /**
  * Constructs a new empty instance.
  */
  protected Summary(boolean noInit) {
    genClient = null;
  }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Summary(String json) throws IllegalArgumentException {
    this();
    try {
      genClient.setJsonObject(new org.json.JSONObject(json));
    } catch (org.json.JSONException e) {
      throw new IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public Summary(org.json.JSONObject jsonObject) {
    this();
    genClient.setJsonObject(jsonObject);
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public Summary(Summary src) {
    this();
    if (src.genClient.getJsonObject() != null) {
      genClient.setJsonObject(com.clover.sdk.v3.JsonHelper.deepCopy(src.genClient.getJSONObject()));
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    return genClient.getJSONObject();
  }

  @Override
  public void validate() {
  }

  /** Checks whether the 'num' field is set and is not null */
  public boolean isNotNullNum() {
    return genClient.cacheValueIsNotNull(CacheKey.num);
  }

  /** Checks whether the 'amount' field is set and is not null */
  public boolean isNotNullAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.amount);
  }

  /** Checks whether the 'tipAmount' field is set and is not null */
  public boolean isNotNullTipAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field is set and is not null */
  public boolean isNotNullTaxAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.taxAmount);
  }

  /** Checks whether the 'serviceChargeAmount' field is set and is not null */
  public boolean isNotNullServiceChargeAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'startTimestamp' field is set and is not null */
  public boolean isNotNullStartTimestamp() {
    return genClient.cacheValueIsNotNull(CacheKey.startTimestamp);
  }

  /** Checks whether the 'endTimestamp' field is set and is not null */
  public boolean isNotNullEndTimestamp() {
    return genClient.cacheValueIsNotNull(CacheKey.endTimestamp);
  }

  /** Checks whether the 'amountWithoutTips' field is set and is not null */
  public boolean isNotNullAmountWithoutTips() {
    return genClient.cacheValueIsNotNull(CacheKey.amountWithoutTips);
  }

  /** Checks whether the 'amountWithoutDiscounts' field is set and is not null */
  public boolean isNotNullAmountWithoutDiscounts() {
    return genClient.cacheValueIsNotNull(CacheKey.amountWithoutDiscounts);
  }

  /** Checks whether the 'discountsWithTaxAndServiceCharge' field is set and is not null */
  public boolean isNotNullDiscountsWithTaxAndServiceCharge() {
    return genClient.cacheValueIsNotNull(CacheKey.discountsWithTaxAndServiceCharge);
  }

  /** Checks whether the 'net' field is set and is not null */
  public boolean isNotNullNet() {
    return genClient.cacheValueIsNotNull(CacheKey.net);
  }

  /** Checks whether the 'netOnline' field is set and is not null */
  public boolean isNotNullNetOnline() {
    return genClient.cacheValueIsNotNull(CacheKey.netOnline);
  }

  /** Checks whether the 'netOffline' field is set and is not null */
  public boolean isNotNullNetOffline() {
    return genClient.cacheValueIsNotNull(CacheKey.netOffline);
  }

  /** Checks whether the 'revenueAmount' field is set and is not null */
  public boolean isNotNullRevenueAmount() {
    return genClient.cacheValueIsNotNull(CacheKey.revenueAmount);
  }

  /** Checks whether the 'revenueAmountWithoutServiceCharge' field is set and is not null */
  public boolean isNotNullRevenueAmountWithoutServiceCharge() {
    return genClient.cacheValueIsNotNull(CacheKey.revenueAmountWithoutServiceCharge);
  }



  /** Checks whether the 'num' field has been set, however the value could be null */
  public boolean hasNum() {
    return genClient.cacheHasKey(CacheKey.num);
  }

  /** Checks whether the 'amount' field has been set, however the value could be null */
  public boolean hasAmount() {
    return genClient.cacheHasKey(CacheKey.amount);
  }

  /** Checks whether the 'tipAmount' field has been set, however the value could be null */
  public boolean hasTipAmount() {
    return genClient.cacheHasKey(CacheKey.tipAmount);
  }

  /** Checks whether the 'taxAmount' field has been set, however the value could be null */
  public boolean hasTaxAmount() {
    return genClient.cacheHasKey(CacheKey.taxAmount);
  }

  /** Checks whether the 'serviceChargeAmount' field has been set, however the value could be null */
  public boolean hasServiceChargeAmount() {
    return genClient.cacheHasKey(CacheKey.serviceChargeAmount);
  }

  /** Checks whether the 'startTimestamp' field has been set, however the value could be null */
  public boolean hasStartTimestamp() {
    return genClient.cacheHasKey(CacheKey.startTimestamp);
  }

  /** Checks whether the 'endTimestamp' field has been set, however the value could be null */
  public boolean hasEndTimestamp() {
    return genClient.cacheHasKey(CacheKey.endTimestamp);
  }

  /** Checks whether the 'amountWithoutTips' field has been set, however the value could be null */
  public boolean hasAmountWithoutTips() {
    return genClient.cacheHasKey(CacheKey.amountWithoutTips);
  }

  /** Checks whether the 'amountWithoutDiscounts' field has been set, however the value could be null */
  public boolean hasAmountWithoutDiscounts() {
    return genClient.cacheHasKey(CacheKey.amountWithoutDiscounts);
  }

  /** Checks whether the 'discountsWithTaxAndServiceCharge' field has been set, however the value could be null */
  public boolean hasDiscountsWithTaxAndServiceCharge() {
    return genClient.cacheHasKey(CacheKey.discountsWithTaxAndServiceCharge);
  }

  /** Checks whether the 'net' field has been set, however the value could be null */
  public boolean hasNet() {
    return genClient.cacheHasKey(CacheKey.net);
  }

  /** Checks whether the 'netOnline' field has been set, however the value could be null */
  public boolean hasNetOnline() {
    return genClient.cacheHasKey(CacheKey.netOnline);
  }

  /** Checks whether the 'netOffline' field has been set, however the value could be null */
  public boolean hasNetOffline() {
    return genClient.cacheHasKey(CacheKey.netOffline);
  }

  /** Checks whether the 'revenueAmount' field has been set, however the value could be null */
  public boolean hasRevenueAmount() {
    return genClient.cacheHasKey(CacheKey.revenueAmount);
  }

  /** Checks whether the 'revenueAmountWithoutServiceCharge' field has been set, however the value could be null */
  public boolean hasRevenueAmountWithoutServiceCharge() {
    return genClient.cacheHasKey(CacheKey.revenueAmountWithoutServiceCharge);
  }


  /**
   * Sets the field 'num'.
   */
  public Summary setNum(java.lang.Long num) {
    return genClient.setOther(num, CacheKey.num);
  }

  /**
   * Sets the field 'amount'.
   */
  public Summary setAmount(java.lang.Long amount) {
    return genClient.setOther(amount, CacheKey.amount);
  }

  /**
   * Sets the field 'tipAmount'.
   */
  public Summary setTipAmount(java.lang.Long tipAmount) {
    return genClient.setOther(tipAmount, CacheKey.tipAmount);
  }

  /**
   * Sets the field 'taxAmount'.
   */
  public Summary setTaxAmount(java.lang.Long taxAmount) {
    return genClient.setOther(taxAmount, CacheKey.taxAmount);
  }

  /**
   * Sets the field 'serviceChargeAmount'.
   */
  public Summary setServiceChargeAmount(java.lang.Long serviceChargeAmount) {
    return genClient.setOther(serviceChargeAmount, CacheKey.serviceChargeAmount);
  }

  /**
   * Sets the field 'startTimestamp'.
   */
  public Summary setStartTimestamp(java.lang.Long startTimestamp) {
    return genClient.setOther(startTimestamp, CacheKey.startTimestamp);
  }

  /**
   * Sets the field 'endTimestamp'.
   */
  public Summary setEndTimestamp(java.lang.Long endTimestamp) {
    return genClient.setOther(endTimestamp, CacheKey.endTimestamp);
  }

  /**
   * Sets the field 'amountWithoutTips'.
   */
  public Summary setAmountWithoutTips(java.lang.Long amountWithoutTips) {
    return genClient.setOther(amountWithoutTips, CacheKey.amountWithoutTips);
  }

  /**
   * Sets the field 'amountWithoutDiscounts'.
   */
  public Summary setAmountWithoutDiscounts(java.lang.Long amountWithoutDiscounts) {
    return genClient.setOther(amountWithoutDiscounts, CacheKey.amountWithoutDiscounts);
  }

  /**
   * Sets the field 'discountsWithTaxAndServiceCharge'.
   */
  public Summary setDiscountsWithTaxAndServiceCharge(java.lang.Long discountsWithTaxAndServiceCharge) {
    return genClient.setOther(discountsWithTaxAndServiceCharge, CacheKey.discountsWithTaxAndServiceCharge);
  }

  /**
   * Sets the field 'net'.
   */
  public Summary setNet(java.lang.Long net) {
    return genClient.setOther(net, CacheKey.net);
  }

  /**
   * Sets the field 'netOnline'.
   */
  public Summary setNetOnline(java.lang.Long netOnline) {
    return genClient.setOther(netOnline, CacheKey.netOnline);
  }

  /**
   * Sets the field 'netOffline'.
   */
  public Summary setNetOffline(java.lang.Long netOffline) {
    return genClient.setOther(netOffline, CacheKey.netOffline);
  }

  /**
   * Sets the field 'revenueAmount'.
   */
  public Summary setRevenueAmount(java.lang.Long revenueAmount) {
    return genClient.setOther(revenueAmount, CacheKey.revenueAmount);
  }

  /**
   * Sets the field 'revenueAmountWithoutServiceCharge'.
   */
  public Summary setRevenueAmountWithoutServiceCharge(java.lang.Long revenueAmountWithoutServiceCharge) {
    return genClient.setOther(revenueAmountWithoutServiceCharge, CacheKey.revenueAmountWithoutServiceCharge);
  }


  /** Clears the 'num' field, the 'has' method for this field will now return false */
  public void clearNum() {
    genClient.clear(CacheKey.num);
  }
  /** Clears the 'amount' field, the 'has' method for this field will now return false */
  public void clearAmount() {
    genClient.clear(CacheKey.amount);
  }
  /** Clears the 'tipAmount' field, the 'has' method for this field will now return false */
  public void clearTipAmount() {
    genClient.clear(CacheKey.tipAmount);
  }
  /** Clears the 'taxAmount' field, the 'has' method for this field will now return false */
  public void clearTaxAmount() {
    genClient.clear(CacheKey.taxAmount);
  }
  /** Clears the 'serviceChargeAmount' field, the 'has' method for this field will now return false */
  public void clearServiceChargeAmount() {
    genClient.clear(CacheKey.serviceChargeAmount);
  }
  /** Clears the 'startTimestamp' field, the 'has' method for this field will now return false */
  public void clearStartTimestamp() {
    genClient.clear(CacheKey.startTimestamp);
  }
  /** Clears the 'endTimestamp' field, the 'has' method for this field will now return false */
  public void clearEndTimestamp() {
    genClient.clear(CacheKey.endTimestamp);
  }
  /** Clears the 'amountWithoutTips' field, the 'has' method for this field will now return false */
  public void clearAmountWithoutTips() {
    genClient.clear(CacheKey.amountWithoutTips);
  }
  /** Clears the 'amountWithoutDiscounts' field, the 'has' method for this field will now return false */
  public void clearAmountWithoutDiscounts() {
    genClient.clear(CacheKey.amountWithoutDiscounts);
  }
  /** Clears the 'discountsWithTaxAndServiceCharge' field, the 'has' method for this field will now return false */
  public void clearDiscountsWithTaxAndServiceCharge() {
    genClient.clear(CacheKey.discountsWithTaxAndServiceCharge);
  }
  /** Clears the 'net' field, the 'has' method for this field will now return false */
  public void clearNet() {
    genClient.clear(CacheKey.net);
  }
  /** Clears the 'netOnline' field, the 'has' method for this field will now return false */
  public void clearNetOnline() {
    genClient.clear(CacheKey.netOnline);
  }
  /** Clears the 'netOffline' field, the 'has' method for this field will now return false */
  public void clearNetOffline() {
    genClient.clear(CacheKey.netOffline);
  }
  /** Clears the 'revenueAmount' field, the 'has' method for this field will now return false */
  public void clearRevenueAmount() {
    genClient.clear(CacheKey.revenueAmount);
  }
  /** Clears the 'revenueAmountWithoutServiceCharge' field, the 'has' method for this field will now return false */
  public void clearRevenueAmountWithoutServiceCharge() {
    genClient.clear(CacheKey.revenueAmountWithoutServiceCharge);
  }


  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return genClient.containsChanges();
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    genClient.resetChangeLog();
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public Summary copyChanges() {
    Summary copy = new Summary();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(Summary src) {
    if (src.genClient.getChangeLog() != null) {
      genClient.mergeChanges(new Summary(src).getJSONObject(), src.genClient);
    }
  }

  public static final android.os.Parcelable.Creator<Summary> CREATOR = new android.os.Parcelable.Creator<Summary>() {
    @Override
    public Summary createFromParcel(android.os.Parcel in) {
      Summary instance = new Summary(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.genClient.setBundle(in.readBundle(getClass().getClassLoader()));
      instance.genClient.setChangeLog(in.readBundle());
      return instance;
    }

    @Override
    public Summary[] newArray(int size) {
      return new Summary[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<Summary> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<Summary>() {
    @Override
    public Summary create(org.json.JSONObject jsonObject) {
      return new Summary(jsonObject);
    }
  };

  public interface Constraints {

    public static final boolean NUM_IS_REQUIRED = false;
    public static final boolean AMOUNT_IS_REQUIRED = false;
    public static final boolean TIPAMOUNT_IS_REQUIRED = false;
    public static final boolean TAXAMOUNT_IS_REQUIRED = false;
    public static final boolean SERVICECHARGEAMOUNT_IS_REQUIRED = false;
    public static final boolean STARTTIMESTAMP_IS_REQUIRED = false;
    public static final boolean ENDTIMESTAMP_IS_REQUIRED = false;
    public static final boolean AMOUNTWITHOUTTIPS_IS_REQUIRED = false;
    public static final boolean AMOUNTWITHOUTDISCOUNTS_IS_REQUIRED = false;
    public static final boolean DISCOUNTSWITHTAXANDSERVICECHARGE_IS_REQUIRED = false;
    public static final boolean NET_IS_REQUIRED = false;
    public static final boolean NETONLINE_IS_REQUIRED = false;
    public static final boolean NETOFFLINE_IS_REQUIRED = false;
    public static final boolean REVENUEAMOUNT_IS_REQUIRED = false;
    public static final boolean REVENUEAMOUNTWITHOUTSERVICECHARGE_IS_REQUIRED = false;

  }

}
